{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","url","hlabel","source","className","style","recipe","ingredients1","map","text","hlabel1","src","alt","href","imgurl","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipe","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","key","label","healthLabels","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,MAAQ,sBAAsB,QAAU,wBAAwB,OAAS,uBAAuB,OAAS,uBAAuB,aAAe,6BAA6B,YAAc,4BAA4B,OAAS,yB,6MCwBhSC,EArBA,SAAC,GAAiE,IAAhEC,EAA+D,EAA/DA,MAAOC,EAAwD,EAAxDA,SAAUC,EAA8C,EAA9CA,MAAQC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,IAAKC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,OAChE,OACA,yBAAKC,UAAWC,IAAMC,QAClB,wBAAIF,UAAWC,IAAMR,OAAQA,GAC7B,wBAAIO,UAAWC,IAAME,cAChBP,EAAYQ,KAAI,SAAAR,GAAW,OACxB,wBAAII,UAAWC,IAAML,aAAcA,EAAYS,UAGvD,wBAAIL,UAAWC,IAAMK,SAChBR,EAAOM,KAAI,SAAAN,GAAM,OACd,wBAAIE,UAAWC,IAAMH,QAASA,OAGtC,yCAAeJ,GACf,yBAAKa,IAAKZ,EAAOa,IAAI,GAAGR,UAAWC,IAAMN,QACzC,uBAAGK,UAAWC,IAAMF,QAApB,WAAqCA,GACrC,uBAAGU,KAAMZ,EAAKG,UAAWC,IAAMS,QAA/B,mCC0COC,G,MA3DH,WAEV,IAFgB,EAKeC,mBAAS,IALxB,mBAKRC,EALQ,KAKCC,EALD,OAMcF,mBAAS,KANvB,mBAMRG,EANQ,KAMAC,EANA,OAOWJ,mBAAS,UAPpB,mBAORK,EAPQ,KAODC,EAPC,KAShBC,qBAAU,WACNC,MACF,CAACH,IAEH,IAAMG,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OAAoCL,EAApC,mBAZf,WAYe,oBAXd,qCAUE,cACVM,EADU,gBAEGA,EAASC,OAFZ,OAEVC,EAFU,OAGhBX,EAAWW,EAAKC,MAHA,2CAAH,qDAgBf,OACE,yBAAK1B,UAAY,OACf,0BAAM2B,SARQ,SAAAC,GAChBA,EAAEC,iBACFX,EAASH,GACTC,EAAU,KAKmBhB,UAAU,eACnC,2BACAA,UAAU,aACV8B,KAAK,OACLC,MAAOhB,EACPiB,SAjBe,SAAAJ,GACnBZ,EAAUY,EAAEK,OAAOF,UAiBf,4BACA/B,UAAU,aACV8B,KAAK,UAFL,WAIF,yBAAK9B,UAAW,WACfa,EAAQT,KAAI,SAAAF,GAAM,OACjB,kBAAC,EAAD,CACAgC,IAAKhC,EAAOA,OAAOiC,MACnB1C,MAASS,EAAOA,OAAOiC,MACvBzC,SAAYQ,EAAOA,OAAOR,SAC1BC,MAAOO,EAAOA,OAAOP,MACrBC,YAAaM,EAAOA,OAAON,YAC3BC,IAAKK,EAAOA,OAAOL,IACnBC,OAAQI,EAAOA,OAAOkC,aACtBrC,OAAQG,EAAOA,OAAOH,gBC3CVsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.120e5f8f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"title\":\"recipe_title__1jR5P\",\"image\":\"recipe_image__BtdIE\",\"hlabel1\":\"recipe_hlabel1__23-A9\",\"hlabel\":\"recipe_hlabel__1yz8q\",\"source\":\"recipe_source__22LYb\",\"ingredients1\":\"recipe_ingredients1__hPPD1\",\"ingredients\":\"recipe_ingredients__2m5_s\",\"imgurl\":\"recipe_imgurl__29bqQ\"};","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport style from './recipe.module.css'\n\nconst Recipe = ({title, calories, image , ingredients, url, hlabel, source}) => {\n    return (\n    <div className={style.recipe}>\n        <h1 className={style.title}>{title}</h1>\n        <ol className={style.ingredients1}>\n            {ingredients.map(ingredients => (\n                <li className={style.ingredients}>{ingredients.text}</li>\n            ))}\n        </ol>\n        <ol className={style.hlabel1}>\n            {hlabel.map(hlabel=> (\n                <li className={style.hlabel}>{hlabel}</li>\n            ))}\n        </ol>\n        <p>Calories : {calories}</p>\n        <img src={image} alt=\"\" className={style.image}/>\n        <p className={style.source}>Source: {source}</p>\n        <a href={url} className={style.imgurl}>Click to view original Recipe</a>\n    </div>)\n}\n\nexport default Recipe;","import React, {useEffect, useState} from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\nconst App = () => {\n\n  const APP_ID = 'd08dba5e';\n  const APP_KEY = 'db3b38364888788997be7368f3d0dbb7';\n\n  const [ recipes, setRecipes] = useState([]);\n  const [ search, setSearch ] = useState(\" \");\n  const [ query, setQuery] = useState(\"banana\");\n\n  useEffect(() => {\n      getRecipe();\n  },[query]);\n\n  const getRecipe = async() => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return (\n    <div className = \"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input \n        className=\"search-bar\" \n        type=\"text\" \n        value={search} \n        onChange={updateSearch}/>\n        <button \n        className=\"search-btn\" \n        type=\"submit\">Search</button>\n      </form>\n      <div className={'recipes'}>\n      {recipes.map(recipe => (\n        <Recipe \n        key={recipe.recipe.label}\n        title = {recipe.recipe.label} \n        calories = {recipe.recipe.calories}\n        image={recipe.recipe.image}\n        ingredients={recipe.recipe.ingredients}\n        url={recipe.recipe.url}\n        hlabel={recipe.recipe.healthLabels}\n        source={recipe.recipe.source}\n        />\n       ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}